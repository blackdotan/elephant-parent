<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>elephant-parent</artifactId>
        <groupId>com.ipukr.elephant</groupId>
        <version>2.1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>elephant-architecture</artifactId>

    <properties>
        <!-- Log -->
        <slf4j.version>1.7.7</slf4j.version>
        <log4j.version>1.2.17</log4j.version>
    </properties>


    <dependencies>
        <!-- 工具 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-configuration</groupId>
            <artifactId>commons-configuration</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <!-- 钚氪工具包 -->
        <dependency>
            <groupId>com.ipukr.elephant</groupId>
            <artifactId>elephant-common</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.ipukr.elephant</groupId>
            <artifactId>elephant-utils</artifactId>
            <version>${project.version}</version>
        </dependency>


        <!-- 线程池 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
        <!-- 代码混淆 -->
        <dependency>
            <groupId>net.sf.proguard</groupId>
            <artifactId>proguard</artifactId>
        </dependency>


        <!-- 日志框架 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

    </dependencies>


    <build>
        <plugins>
            <!--配置生成Javadoc包-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.4</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <!--配置生成源码包-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                    <skipSource>true</skipSource>
                </configuration>
            </plugin>
            <!-- 默认编译工具|JDK1.8 -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!-- resources文件若有中文，解决编译会异常的问题 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- 混淆时刻，这里是打包的时候混淆-->
                        <phase>package</phase>
                        <goals>
                            <!-- 使用插件的什么功能，当然是混淆-->
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- 是否将生成的PG文件安装部署-->
                    <attach>false</attach>
                    <!-- 是否混淆-->
                    <obfuscate>true</obfuscate>
                    <!-- 指定生成文件分类 -->
                    <attachArtifactClassifier>pg</attachArtifactClassifier>
                    <options>
                        <!-- JDK目标版本1.7-->
                        <option>-target 1.8</option>
                        <!-- 不做收缩（删除注释、未被引用代码）-->
                        <option>-dontshrink</option>
                        <!-- 不做优化（变更代码实现逻辑）-->
                        <option>-dontoptimize</option>
                        <!-- 不路过非公用类文件及成员-->
                        <option>-dontskipnonpubliclibraryclasses</option>
                        <option>-dontskipnonpubliclibraryclassmembers</option>
                        <!-- 优化时允许访问并修改有修饰符的类和类的成员 -->
                        <option>-allowaccessmodification</option>
                        <!-- 确定统一的混淆类的成员名称来增加混淆-->
                        <option>-useuniqueclassmembernames</option>
                        <!-- 不混淆所有包名，本人测试混淆后WEB项目问题实在太多，毕竟Spring配置中有大量固定写法的包名-->
                        <!--<option>-keeppackagenames</option>-->
                        <!-- 不混淆所有特殊的类-->
                        <option>-keepattributes Signature</option>
                        <!-- 不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射-->
                        <!--<option>-keepclassmembers public class * {void set*(***);*** get*();}</option>-->

                        <!-- 不混淆job包下的所有类名，且类中的方法也不混淆-->
                        <!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.job.** { &lt;methods&gt;; }</option>-->
                        <!--&lt;!&ndash; 不混淆filter包下的所有类名，这里主要是对Shiro的路踢人过滤器混淆，对类的属性和方法进行了混淆&ndash;&gt;-->
                        <!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.filter.** </option>-->
                        <!--&lt;!&ndash; 不混淆凭证包下的所有类名，但对类中的属性、方法进行混淆，原因是Spring配置中用到了这个类名&ndash;&gt;-->
                        <!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.credntials.** </option>-->
                        <!--&lt;!&ndash; 混淆目的同上，这个是拦截器的包，包中有防止重复提交的拦截器&ndash;&gt;-->
                        <!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.interceptor.** </option>-->
                        <!--&lt;!&ndash; 混淆目的同上，这个是域包，包中有用户登录域&ndash;&gt;-->
                        <!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.realm.** </option>-->
                        <!--&lt;!&ndash; 不混淆model包中的所有类以及类的属性及方法，实体包，混淆了会导致ORM框架及前端无法识别&ndash;&gt;-->
                        <!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.model.** {*;}</option>-->
                        <!--&lt;!&ndash; 以下两个包因为大部分是Spring管理的Bean，不对包类的类名进行混淆，但对类中的属性和方法混淆&ndash;&gt;-->
                        <!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.service.** </option>-->
                        <option>-keep class com.ipukr.elephant.architecture.AbstractAPI</option>
                        <option>-keep class com.ipukr.elephant.architecture.AbstractAPI {*;}</option>
                        <option>-keep class com.ipukr.elephant.architecture.factory.Factory</option>
                        <option>-keep class com.ipukr.elephant.architecture.factory.Factory {&lt;methods&gt;;}</option>

                        <option>-keep class com.ipukr.elephant.architecture.factory.PoolFactory</option>
                        <option>-keep class com.ipukr.elephant.architecture.factory.PoolFactory {&lt;methods&gt;;}</option>

                        <option>-keep class com.ipukr.elephant.architecture.context.Context</option>
                        <option>-keep class com.ipukr.elephant.architecture.context.Context {&lt;methods&gt;;}</option>

                    </options>
                    <injar>${project.build.finalName}.jar</injar>
                    <outjar>${project.build.finalName}.jar</outjar>
                    <!-- 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 -->
                    <libs>
                        <lib>${java.home}/lib/rt.jar</lib>
                    </libs>
                    <!-- 加载文件的过滤器，就是你的工程目录了-->
                    <!--<inFilter>com/chinatelecom/gz/wy/zhukun/shiro_spring/**</inFilter>-->
                    <!-- 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧-->
                    <!--<injar>classes</injar>-->
                    <!-- 输出目录-->
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>